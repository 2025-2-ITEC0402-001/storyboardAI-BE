name: CI/CD Pipeline

on:
  push:
    branches: [ main, Deploy/issue-#11 ]

permissions:
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: storyboard-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to EC2
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Create SSH directory and key file
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          
          # Add EC2 host to known hosts
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
          
          # Copy deployment scripts to EC2
          scp -i ~/.ssh/ec2_key.pem deploy.sh get-current-port.sh $EC2_USER@$EC2_HOST:/tmp/
          
          # Execute deployment on EC2
          ssh -i ~/.ssh/ec2_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            
            # Make scripts executable
            chmod +x /tmp/deploy.sh /tmp/get-current-port.sh
            
            # Get current running port
            CURRENT_PORT=$(/tmp/get-current-port.sh)
            echo "Current port: $CURRENT_PORT"
            
            # Determine new port (toggle between 8080 and 8081)
            if [ "$CURRENT_PORT" = "8080" ]; then
              NEW_PORT="8081"
            else
              NEW_PORT="8080"
            fi
            
            echo "New port: $NEW_PORT"
            
            # Pull latest Docker image
            docker pull ${{ env.DOCKER_IMAGE }}
            
            # Execute Blue/Green deployment
            /tmp/deploy.sh ${{ env.DOCKER_IMAGE }} $NEW_PORT $CURRENT_PORT
            
            # Cleanup
            rm -f /tmp/deploy.sh /tmp/get-current-port.sh
          EOF
          
          # Cleanup local SSH key
          rm -f ~/.ssh/ec2_key.pem

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          sleep 10
          
          # Check if the application is responding
          for i in {1..10}; do
            if curl -f https://storyboardai.site/actuator/health > /dev/null 2>&1; then
              echo "Deployment verification successful!"
              exit 0
            fi
            echo "Verification attempt $i/10 failed, waiting 10 seconds..."
            sleep 10
          done
          
          echo "Deployment verification failed!"
          exit 1